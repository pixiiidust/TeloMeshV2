# 📁 telomesh/ — MVP SLC Implementation (Simple + Lovable)

# Cursor Rule: Directory Hygiene Protocol
# ----------------------------------------
# Every file must:
# 1. Contain a clearly scoped set of related functions.
# 2. Be directly tied to a specific output or UI view.
# 3. Be covered by at least 1 test in /tests matching its prefix.
# 4. Follow the directory below — DO NOT create new folders without approval.
# 5. New files must register here and declare tests — else trigger the hygiene fix loop.

# ────────────────────────────────────────────────────────────────

📁 data/                     # SIMPLE STAGE — Events Generation
├── synthetic_event_generator.py     # Generate mock events
│   └── generate_synthetic_events(n_users: int, events_per_user: int) -> pd.DataFrame

📁 ingest/                     # SIMPLE STAGE — Event → Flow → Graph
├── parse_sessions.py         # Converts CSV → structured flows
│   └── parse_sessions(input_csv: str, output_csv: str) -> pd.DataFrame
│
├── build_graph.py            # Builds session path graph
│   └── build_graph(input_csv: str, output_graph: str) -> nx.DiGraph
│
├── flow_metrics.py           # Validates sessions and graph
│   └── validate_sessions(session_flows_csv: str) -> dict
│   └── validate_graph(graph_pickle: str) -> dict
│   └── run_metrics() -> None

# ────────────────────────────────────────────────────────────────

📁 analysis/                   # LOVABLE STAGE — Metrics & Friction
├── event_chokepoints.py      # Compute friction metrics
│   └── compute_exit_rates(df: pd.DataFrame) -> pd.DataFrame
│   └── compute_betweenness(g: nx.DiGraph) -> Dict[str, float]
│   └── compute_wsjf_friction(exit_df, centrality_dict) -> pd.DataFrame
│   └── detect_fragile_flows(session_df: pd.DataFrame) -> pd.DataFrame
│   └── export_chokepoints(df, flow_df, node_map) -> None

# ────────────────────────────────────────────────────────────────

📁 ui/                         # LOVABLE STAGE — PM-Facing Dashboard
├── dashboard.py              # Streamlit dashboard
│   └── load_friction_data() -> Tuple[DataFrame, DataFrame, Dict]
│   └── render_friction_table(df: pd.DataFrame)
│   └── render_graph_heatmap(graph: nx.DiGraph, score_map: Dict[str, float])
│   └── render_flow_summaries(flow_df: pd.DataFrame)
│   └── render_tooltips(metric: str) -> str

# ────────────────────────────────────────────────────────────────

📁 utils/                      # Utility Tools
├── analytics_converter.py    # Convert from various analytics platforms
│   └── convert_data(input_file: str, output_file: str, format: str, telomesh_format: bool) -> pd.DataFrame
│   └── generate_sample_data(format: str, output_file: str) -> pd.DataFrame
│   └── map_to_telomesh_format(df: pd.DataFrame, format: str) -> pd.DataFrame
├── README.md                 # Brief overview of utilities
├── GUIDE.md                  # Detailed converter documentation

# ────────────────────────────────────────────────────────────────

📁 outputs/                    # Data generated by pipeline
├── session_flows.csv             # From parse_sessions.py
├── user_graph.gpickle            # From build_graph.py
├── event_chokepoints.csv         # From event_chokepoints.py
├── high_friction_flows.csv       # From event_chokepoints.py
├── friction_node_map.json        # From event_chokepoints.py

# ────────────────────────────────────────────────────────────────

📁 logs/                      # Validation logs
├── session_stats.log            # From flow_metrics.py
├── metrics.json                 # From flow_metrics.py

# ────────────────────────────────────────────────────────────────

📁 tests/                     # Enforces Cursor TDD loop
├── test_synthetic_events.py
├── test_parse_sessions.py
├── test_build_graph.py
├── test_flow_metrics.py
├── test_event_chokepoints.py
├── test_dashboard_ui.py
├── test_analytics_converter.py

# ────────────────────────────────────────────────────────────────

main.py                       # Pipeline entrypoint
└── run_all_stages() -> None

